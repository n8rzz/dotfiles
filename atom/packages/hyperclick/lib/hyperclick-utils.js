Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.defaultWordRegExpForEditor = defaultWordRegExpForEditor;

/**
 * Returns the text and range for the word that contains the given position.
 */

exports.getWordTextAndRange = getWordTextAndRange;

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _atom = require('atom');

'use babel';

function defaultWordRegExpForEditor(textEditor) {
  var lastCursor = textEditor.getLastCursor();
  if (!lastCursor) {
    return null;
  }
  return lastCursor.wordRegExp();
}

function getWordTextAndRange(textEditor, position, wordRegExp) {
  var textAndRange = null;

  wordRegExp = wordRegExp || defaultWordRegExpForEditor(textEditor);

  if (wordRegExp) {
    var buffer = textEditor.getBuffer();
    buffer.scanInRange(wordRegExp, buffer.rangeForRow(position.row), function (data) {
      if (data.range.containsPoint(position)) {
        textAndRange = {
          text: data.matchText,
          range: data.range
        };
        data.stop();
      } else if (data.range.end.column > position.column) {
        // Stop the scan if the scanner has passed our position.
        data.stop();
      }
    });
  }

  if (!textAndRange) {
    textAndRange = { text: '', range: new _atom.Range(position, position) };
  }

  return textAndRange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hc3VhcmV6L0Rlc2t0b3AvaHlwZXJjbGljay9saWIvaHlwZXJjbGljay11dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQVdvQixNQUFNOztBQVgxQixXQUFXLENBQUM7O0FBYUwsU0FBUywwQkFBMEIsQ0FDeEMsVUFBMkIsRUFDbEI7QUFDVCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDOUMsTUFBSSxDQUFDLFVBQVUsRUFBRTtBQUNmLFdBQU8sSUFBSSxDQUFDO0dBQ2I7QUFDRCxTQUFPLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztDQUNoQzs7QUFRTSxTQUFTLG1CQUFtQixDQUNqQyxVQUFzQixFQUN0QixRQUFvQixFQUNwQixVQUFvQixFQUNGO0FBQ2xCLE1BQUksWUFBK0IsR0FBRyxJQUFJLENBQUM7O0FBRTNDLFlBQVUsR0FBRyxVQUFVLElBQUksMEJBQTBCLENBQUMsVUFBVSxDQUFDLENBQUM7O0FBRWxFLE1BQUksVUFBVSxFQUFFO0FBQ2QsUUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3RDLFVBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQUEsSUFBSSxFQUFJO0FBQ3ZFLFVBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDdEMsb0JBQVksR0FBRztBQUNiLGNBQUksRUFBRSxJQUFJLENBQUMsU0FBUztBQUNwQixlQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDbEIsQ0FBQztBQUNGLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztPQUNiLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRTs7QUFFbEQsWUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO09BQ2I7S0FDRixDQUFDLENBQUM7R0FDSjs7QUFFRCxNQUFJLENBQUMsWUFBWSxFQUFFO0FBQ2pCLGdCQUFZLEdBQUcsRUFBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxnQkFBVSxRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQUMsQ0FBQztHQUNqRTs7QUFFRCxTQUFPLFlBQVksQ0FBQztDQUNyQiIsImZpbGUiOiIvVXNlcnMvYXN1YXJlei9EZXNrdG9wL2h5cGVyY2xpY2svbGliL2h5cGVyY2xpY2stdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQge1JhbmdlfSBmcm9tICdhdG9tJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRXb3JkUmVnRXhwRm9yRWRpdG9yKFxuICB0ZXh0RWRpdG9yOiBhdG9tJFRleHRFZGl0b3Jcbik6ID9SZWdFeHAge1xuICBjb25zdCBsYXN0Q3Vyc29yID0gdGV4dEVkaXRvci5nZXRMYXN0Q3Vyc29yKCk7XG4gIGlmICghbGFzdEN1cnNvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBsYXN0Q3Vyc29yLndvcmRSZWdFeHAoKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0ZXh0IGFuZCByYW5nZSBmb3IgdGhlIHdvcmQgdGhhdCBjb250YWlucyB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gKi9cblxudHlwZSBXb3JkVGV4dEFuZFJhbmdlID0ge3RleHQ6IHN0cmluZzsgcmFuZ2U6IFJhbmdlfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdvcmRUZXh0QW5kUmFuZ2UoXG4gIHRleHRFZGl0b3I6IFRleHRFZGl0b3IsXG4gIHBvc2l0aW9uOiBhdG9tJFBvaW50LFxuICB3b3JkUmVnRXhwPzogP1JlZ0V4cFxuKTogV29yZFRleHRBbmRSYW5nZSB7XG4gIGxldCB0ZXh0QW5kUmFuZ2U6ID9Xb3JkVGV4dEFuZFJhbmdlID0gbnVsbDtcblxuICB3b3JkUmVnRXhwID0gd29yZFJlZ0V4cCB8fCBkZWZhdWx0V29yZFJlZ0V4cEZvckVkaXRvcih0ZXh0RWRpdG9yKTtcblxuICBpZiAod29yZFJlZ0V4cCkge1xuICAgIGNvbnN0IGJ1ZmZlciA9IHRleHRFZGl0b3IuZ2V0QnVmZmVyKCk7XG4gICAgYnVmZmVyLnNjYW5JblJhbmdlKHdvcmRSZWdFeHAsIGJ1ZmZlci5yYW5nZUZvclJvdyhwb3NpdGlvbi5yb3cpLCBkYXRhID0+IHtcbiAgICAgIGlmIChkYXRhLnJhbmdlLmNvbnRhaW5zUG9pbnQocG9zaXRpb24pKSB7XG4gICAgICAgIHRleHRBbmRSYW5nZSA9IHtcbiAgICAgICAgICB0ZXh0OiBkYXRhLm1hdGNoVGV4dCxcbiAgICAgICAgICByYW5nZTogZGF0YS5yYW5nZSxcbiAgICAgICAgfTtcbiAgICAgICAgZGF0YS5zdG9wKCk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEucmFuZ2UuZW5kLmNvbHVtbiA+IHBvc2l0aW9uLmNvbHVtbikge1xuICAgICAgICAvLyBTdG9wIHRoZSBzY2FuIGlmIHRoZSBzY2FubmVyIGhhcyBwYXNzZWQgb3VyIHBvc2l0aW9uLlxuICAgICAgICBkYXRhLnN0b3AoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghdGV4dEFuZFJhbmdlKSB7XG4gICAgdGV4dEFuZFJhbmdlID0ge3RleHQ6ICcnLCByYW5nZTogbmV3IFJhbmdlKHBvc2l0aW9uLCBwb3NpdGlvbil9O1xuICB9XG5cbiAgcmV0dXJuIHRleHRBbmRSYW5nZTtcbn1cbiJdfQ==